<?php

namespace Drupal\playground_form\Form;

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\user\RegisterForm;
use Drupal\Core\Form\FormStateInterface;

class NewRegisterForm extends RegisterForm {

  protected function actions(array $form, FormStateInterface $form_state) {
    $element = parent::actions($form, $form_state);
    $element['submit']['#value'] = 'Submit';
    return $element;
  }

  public function form(array $form, FormStateInterface $form_state) {
    // Start with the default user account fields.
    $form = parent::form($form, $form_state);

    $form['field_address']['widget'][0]['value']['#placeholder'] = 'Please enter your address.';
    $form['field_address']['widget'][0]['value']['#description'] = ' ';
    $form['field_address']['widget'][0]['value']['#prefix'] = '<div id="custom-message">';
    $form['field_address']['widget'][0]['value']['#suffix'] = '</div>';
    $form['field_address']['widget'][0]['value']['#attached'] = [
      'library' => ['playground_form/form-js'],
    ];
    $form['field_address']['widget'][0]['value']['#ajax'] = [
      'callback' => [$this, 'getAddressList'],
      'disable-refocus' => FALSE,
      // 'event' => 'keyup',
      'event' => 'overminlength',
      'progress' => [
        'type' => 'throbber',
        'message' => $this->t('Searching...'),
      ],
    ];
    // Assigning the field_about_me description with a space will render it on FE,
    // and we can use this later in the Ajax callback.
    $form['field_about_me']['widget'][0]['value']['#description'] = ' ';
    $form['field_about_me']['widget'][0]['value']['#maxlength'] = 300;
    $form['field_about_me']['widget'][0]['value']['#ajax'] = [
      'callback' => [$this, 'countCharactersAjaxCallback'],
      'disable-refocus' => TRUE,
      'event' => 'change',
      'progress' => [
        'type' => 'throbber',
        'message' => $this->t('Calculating entry...'),
      ],
    ];

    $form['field_postcode']['widget'][0]['value']['#maxlength'] = 4;
    return $form;
  }

  public function save(array $form, FormStateInterface $form_state) {
    parent::save($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    parent::submitForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * Calculates the number of characters of field_about_me field.
   *
   * @param array $form
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *
   * @return \Drupal\Core\Ajax\AjaxResponse
   */
  public function countCharactersAjaxCallback(array &$form, FormStateInterface $form_state): AjaxResponse {
    $response = new AjaxResponse();
    $size = strlen($form_state->getValue('field_about_me')[0]['value']);
    $max_size = $form['field_about_me']['widget'][0]['value']['#maxlength'];
    $text = '%d out of %d characters used.';
    $response->addCommand(new InvokeCommand('#edit-field-about-me-0-value--description', 'text', [sprintf($text, $size, $max_size)]));
    return $response;
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {
    return parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function getAddressList(&$form, FormStateInterface $form_state) {
    $response = new AjaxResponse();
    $query = $form_state->getValue('field_address')[0]['value'];

    // Use Address Search Service.
    $service = \Drupal::service('playground_address_search.connection');
    $addresses = $service->getAddresses($query);
    $isError = gettype($addresses) === 'array' ?? TRUE;

    if ($isError && array_key_exists('error', $addresses)) {
      // If there is an error with the Address Search API,
      // Let user enter address manually without Ajax callback.
      $form['field_address']['widget'][0]['value'] ['#ajax'] = [];
      $form['field_address']['widget'][0]['value']['#description'] = 'Please enter address manually';

      // Render the field_address with the stripped ajax property.
      $rendered_array = \Drupal::service('renderer')
        ->renderRoot($form['field_address']['widget'][0]);
      return $response->addCommand(new ReplaceCommand('#custom-message', ['#markup' => $rendered_array]));
    }
    else {
      $list = json_decode($addresses, FALSE);
      return $response;
    }
  }

}
